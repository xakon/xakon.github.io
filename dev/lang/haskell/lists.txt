List Comprehensions
-------------------

Like in 'Python', 'Haskell' also has the notion of *List Comprehensions*.
There are very similar to the mathematical term, where you can create a
new set (list) of items from a previous one.  The syntax is pretty clear
and is based on 'Generators' and 'Guards'.

[source,haskell]
----
> [x ^ 2 | x <- [1..5]]
[1, 4, 9, 16, 25]
----

The expression `x <- [1..5]` is the 'generator'.  Each list comprehension may
have multiple 'generators', which resemble multiple-level `for` loops:
the first 'generator' is the outer loop, the last one is the inner one.
Later 'generators' can also depend on previous upon the values of variables from
earlier 'generators'.

[source,haskell]
----
-- List of all possible ordered pairings of elements from [1..3]
> [(x, y) | x <- [1..3], y <- [x..3]]
[(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]
----

The wildcard pattern `_` is sometimes useful in 'generators' to discard certain
elements from a list.  For example, `length` function can be defined by
replacing each element by 1 and summing the resulting list.

[source,haskell]
----
length	  :: [a] -> Int
length xs  = sum [1 | _ <- xs]
----

List Comprehensions can also use logical expressions, called 'guards', to filter
the values produced by earlier 'generators'.


////
# vim: set ft=asciidoc:
////
