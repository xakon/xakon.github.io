Glasgow Haskell Compiler (GHCi)
===============================

https://github.com/takenobu-hs/haskell-ghc-illustrated[GHC Illustrated]
provides some nice (although unofficial) presentations about the internals
of GHC.

Commands can be abbreviated to single letter.

:q or :quit
:l or :load	load a new file
:r or :reload	reload last loaded file
:i or :info	details of operators and functions, info about types
:t or :type	find the type of an expression
:set		enable specific features of GHCi or display all options
:unset		disable options specified with `:set`
:show modules	print last loaded file(s)
:show imports	print currently imported modules

Features of GHCi that can be enabled at run-time are:
 - `+t`		print the type of `it`
 - `+m`		allow multi-line commands
 - `+s`		display stats on time/memory after each evaluation
 - `-Wall`	enable more warnings and checks
 - `-v`		verbose, debug output
 - `-XOverloadedStrings`	enable the OverloadedStrings extension

In general, options that start with `+` are GHCi specific options.
On the other hand, options that start with `-` are GHC specific.

With the `set` directive we can enable/disable _language extensions_;  for
example:  `:set -XTypeApplications`.  We can save these options into the main
GHCi configuration, too.

Some modules that belong to the `base` package are available by default to GHCi.
Others can be found out by running `ghc-pkg list`.  For example, we will be
able to use other packages, installed using `cabal` (`cabal install`) or Stack
(`stack install`).

At GHCi the latest evaluated expression is stored in the value of `it` and
can be freely used in the next expression.

Change its prompt (by default it's `Prelude>` with:

////
# Haskell
////

   :set prompt "GHCi> "
   :set prompt "Î»> "


The configuration of GHCi can be saved in one of the following locations (all of
them will be read in this order):

   ./.ghci
   $HOME/.ghc/ghci.conf
   $HOME/.ghci

In this useful post from Chris Done,
https://chrisdone.com/posts/making-ghci-fast/[Making GHCi scale better and faster],
some options are mentioned for GHCi to load faster with a lot of modules enabled,
and also to give some hints and compilation errors:

 - `ghci -fobject-code` or `:set -fobject-code`
 - `ghci -fbyte-code` or `:set -fbyte-code`
 - `ghci -fno-code` or `:set-f no-code`

I'm not sure what these options are doing, but let's keep a note about them,
to investigate them further in the future.


////
# vim: set ft=asciidoc:
////
